apk update

apk upgrade

cat <<EOF > docker-compose.yml
version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin_container
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: rootpassword
    ports:
      - "8080:80"
    depends_on:
      - mysql

volumes:
  mysql_data:
EOF

docker login

docker-compose up -d

pip install mysql-connector-python

echo

show_progress() {
    for i in {1..40}; do
        echo -ne "Iniciando o Servidor MySQL.   \r"
        sleep 0.5
        echo -ne "Iniciando o Servidor MySQL..  \r"
        sleep 0.5
        echo -ne "Iniciando o Servidor MySQL... \r"
        sleep 0.5
        echo -ne "\r"
    done
}

show_progress

echo

echo "O servidor MySQL foi iniciado!"

echo

cat <<EOF > arquivoMySQL.py
import mysql.connector

def ifPassarInDb(id_matricula, N1, N2, faltas, cursor):
    aprovado_sn = not ((faltas >= 20) or (((2*N1 + 3*N2) / 5) < 6))  # Define se o aluno passou ou não
    cursor.execute('UPDATE TB_MATRICULA SET aprovado_SN = %s WHERE id_matricula = %s;', ("APROVADO" if aprovado_sn else "REPROVADO", id_matricula))

# Conexão com o banco de dados
conn = mysql.connector.connect(
  host="localhost",
  user="myuser",
  password="mypassword",
  database="mydatabase"
)

cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS TB_ALUNO (
        id_aluno INT PRIMARY KEY AUTO_INCREMENT,
        nome_aluno TEXT NOT NULL
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS TB_DISCIPLINA (
        id_disciplina INT PRIMARY KEY AUTO_INCREMENT,
        nome_disciplina TEXT NOT NULL
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS TB_PROFESSOR (
        id_professor INT PRIMARY KEY AUTO_INCREMENT,
        nome_professor TEXT NOT NULL
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS TB_MATRICULA (
        id_matricula INT PRIMARY KEY AUTO_INCREMENT,
        id_aluno INT NOT NULL,
        id_disciplina INT NOT NULL,
        id_professor INT,
        nota_N1 DECIMAL(4,2),
        nota_N2 DECIMAL(4,2),
        faltas INT,
        aprovado_SN varchar(9),
        FOREIGN KEY (id_aluno) REFERENCES TB_ALUNO(id_aluno),
        FOREIGN KEY (id_professor) REFERENCES TB_PROFESSOR(id_professor),
        FOREIGN KEY (id_disciplina) REFERENCES TB_DISCIPLINA(id_disciplina)
    )
""")


conn.commit()


cursor.executemany('INSERT INTO TB_ALUNO (nome_aluno) VALUES (%s);', [
    ("Arthur de Araujo",),
    ("Vitória Oliveira",),
    ("Lucas Costa",),
    ("Sabrinna do Nascimento",)
])

cursor.executemany('INSERT INTO TB_DISCIPLINA (nome_disciplina) VALUES (%s);', [
    ("Cálculo I",),
    ("POO",),
    ("Engenharia de Software",)
])

cursor.executemany('INSERT INTO TB_PROFESSOR (nome_professor) VALUES (%s);', [
    ("Gêvane",),
    ("Roger",),
    ("Taveira",)
])

cursor.executemany('INSERT INTO TB_MATRICULA (id_aluno, id_disciplina, id_professor, nota_N1, nota_N2, faltas) VALUES (%s, %s, %s, %s, %s, %s);', [
    (1, 1, 1, 8, 5, 15),
    (1, 2, 2, 8, 5, 15),
    (2, 2, 2, 10, 10, 0),
    (3, 3, 3, 10, 2, 1),
    (4, 3, 3, 7, 0, 30)
])

conn.commit()


cursor.execute("SELECT id_matricula, nota_N1, nota_N2, faltas FROM TB_MATRICULA")
matriculas = cursor.fetchall()

for item in matriculas:
    id_matricula, nota_N1, nota_N2, faltas = item
    ifPassarInDb(id_matricula, nota_N1, nota_N2, faltas, cursor)

conn.commit()


cursor.execute("""
    SELECT A.nome_aluno, D.nome_disciplina, M.aprovado_SN
    FROM TB_MATRICULA M
    JOIN TB_ALUNO A ON M.id_aluno = A.id_aluno
    JOIN TB_DISCIPLINA D ON M.id_disciplina = D.id_disciplina
""")
matriculas = cursor.fetchall()

print()
for matricula in matriculas:
    print(matricula)

cursor.close()
conn.close()
EOF

python arquivoMySQL.py